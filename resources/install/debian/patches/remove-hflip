Description: Removes hflip, filters internal api availbale in ffmpeg but not in libav
Index: libjitsi/lib/src/jitsi-lgpl-dependencies/src/native/ffmpeg/org_jitsi_impl_neomedia_codec_FFmpeg.c
===================================================================
--- libjitsi.orig/lib/src/jitsi-lgpl-dependencies/src/native/ffmpeg/org_jitsi_impl_neomedia_codec_FFmpeg.c
+++ libjitsi/lib/src/jitsi-lgpl-dependencies/src/native/ffmpeg/org_jitsi_impl_neomedia_codec_FFmpeg.c
@@ -569,7 +569,7 @@ Java_org_jitsi_impl_neomedia_codec_FFmpe
 DEFINE_AVCODECCONTEXT_I_PROPERTY_SETTER(trellis, trellis)
 DEFINE_AVCODECCONTEXT_I_PROPERTY_SETTER(workaround_1bugs, workaround_bugs)
 
-JNIEXPORT jlong JNICALL
+/*JNIEXPORT jlong JNICALL
 Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1graph_1alloc
     (JNIEnv *env, jclass clazz)
 {
@@ -632,7 +632,7 @@ ffsink_query_formats(AVFilterContext *ct
     AVFilterContext *src = ctx;
     int err;
 
-    /* Find buffer. */
+    / * Find buffer. * /
 #ifdef _JITSI_LIBAV_
     while (src && src->input_count && src->inputs)
 #else
@@ -647,7 +647,7 @@ ffsink_query_formats(AVFilterContext *ct
             break;
     }
 
-    /* Make ffsink output in the format in which buffer inputs. */
+    / * Make ffsink output in the format in which buffer inputs. * /
     if (src)
     {
         const int pix_fmts[] = { src->outputs[0]->in_formats->formats[0], -1 };
@@ -696,26 +696,26 @@ Java_org_jitsi_impl_neomedia_codec_FFmpe
                     (AVFilterInOut **) (intptr_t) outputs,
                     (AVClass *) (intptr_t) log_ctx);
 
-        /*
+        / *
          * FIXME The implementation at the time of this writing presumes that
          * the first filter is buffer, the last filter is nullsink meant to be
          * ffsink and the ffsink is expected to output in the format in which
          * the buffer inputs.
-         */
+         * /
         if (0 == ret)
         {
-            /* Turn nullsink into ffsink. */
+            / * Turn nullsink into ffsink. * /
             unsigned filterCount = graph_->filter_count;
 
             if (filterCount)
             {
                 AVFilterContext *ffsink = graph_->filters[filterCount - 1];
 
-                /*
+                / *
                  * Make sure query_format of ffsink outputs in the format in
                  * which buffer inputs. Otherwise, the output format may end up
                  * different on the C and Java sides.
-                 */
+                 * /
                 ffsink->filter->uninit = ffsink_uninit;
                 ffsink->priv = NULL;
                 ffsink->filter->query_formats = ffsink_query_formats;
@@ -745,7 +745,7 @@ Java_org_jitsi_impl_neomedia_codec_FFmpe
     (JNIEnv *env, jclass clazz, jlong ref)
 {
     avfilter_unref_buffer((AVFilterBufferRef *) (intptr_t) ref);
-}
+}*/
 
 /*
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
@@ -879,7 +879,7 @@ Java_org_jitsi_impl_neomedia_codec_FFmpe
                     (int) width, (int) height);
 }
 
-JNIEXPORT jlong JNICALL
+/*JNIEXPORT jlong JNICALL
 Java_org_jitsi_impl_neomedia_codec_FFmpeg_get_1filtered_1video_1frame
     (JNIEnv *env, jclass clazz, jlong input, jint width, jint height,
         jint pixFmt, jlong buffer, jlong ffsink, jlong output)
@@ -902,12 +902,12 @@ Java_org_jitsi_impl_neomedia_codec_FFmpe
             {
                 AVFrame *output_ = (AVFrame *) (intptr_t) output;
 
-                /*
+                / *
                  * The data of cur_buf will be returned into output so it needs
                  * to exist at least while output needs it. So take ownership of
                  * cur_buf and the user of output will unref it when they are
                  * done with output.
-                 */
+                 * /
                 ffsink_->priv = NULL;
 
                 memcpy(output_->data, ref->data, sizeof(output_->data));
@@ -921,7 +921,7 @@ Java_org_jitsi_impl_neomedia_codec_FFmpe
         }
     }
     return (jlong) (intptr_t) ref;
-}
+}*/
 
 /*
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
Index: libjitsi/lib/src/jitsi-lgpl-dependencies/src/native/ffmpeg/org_jitsi_impl_neomedia_codec_FFmpeg.h
===================================================================
--- libjitsi.orig/lib/src/jitsi-lgpl-dependencies/src/native/ffmpeg/org_jitsi_impl_neomedia_codec_FFmpeg.h
+++ libjitsi/lib/src/jitsi-lgpl-dependencies/src/native/ffmpeg/org_jitsi_impl_neomedia_codec_FFmpeg.h
@@ -459,7 +459,7 @@ JNIEXPORT void JNICALL Java_org_jitsi_im
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
  * Method:    avfilter_graph_alloc
  * Signature: ()J
- */
+
 JNIEXPORT jlong JNICALL Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1graph_1alloc
   (JNIEnv *, jclass);
 
@@ -467,7 +467,7 @@ JNIEXPORT jlong JNICALL Java_org_jitsi_i
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
  * Method:    avfilter_graph_config
  * Signature: (JJ)I
- */
+
 JNIEXPORT jint JNICALL Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1graph_1config
   (JNIEnv *, jclass, jlong, jlong);
 
@@ -475,7 +475,7 @@ JNIEXPORT jint JNICALL Java_org_jitsi_im
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
  * Method:    avfilter_graph_free
  * Signature: (J)V
- */
+
 JNIEXPORT void JNICALL Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1graph_1free
   (JNIEnv *, jclass, jlong);
 
@@ -483,7 +483,7 @@ JNIEXPORT void JNICALL Java_org_jitsi_im
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
  * Method:    avfilter_graph_get_filter
  * Signature: (JLjava/lang/String;)J
- */
+
 JNIEXPORT jlong JNICALL Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1graph_1get_1filter
   (JNIEnv *, jclass, jlong, jstring);
 
@@ -491,7 +491,7 @@ JNIEXPORT jlong JNICALL Java_org_jitsi_i
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
  * Method:    avfilter_graph_parse
  * Signature: (JLjava/lang/String;JJJ)I
- */
+
 JNIEXPORT jint JNICALL Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1graph_1parse
   (JNIEnv *, jclass, jlong, jstring, jlong, jlong, jlong);
 
@@ -499,7 +499,7 @@ JNIEXPORT jint JNICALL Java_org_jitsi_im
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
  * Method:    avfilter_register_all
  * Signature: ()V
- */
+
 JNIEXPORT void JNICALL Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1register_1all
   (JNIEnv *, jclass);
 
@@ -507,9 +507,9 @@ JNIEXPORT void JNICALL Java_org_jitsi_im
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
  * Method:    avfilter_unref_buffer
  * Signature: (J)V
- */
+
 JNIEXPORT void JNICALL Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1unref_1buffer
-  (JNIEnv *, jclass, jlong);
+  (JNIEnv *, jclass, jlong);*/
 
 /*
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
Index: libjitsi/src/org/jitsi/impl/neomedia/MediaServiceImpl.java
===================================================================
--- libjitsi.orig/src/org/jitsi/impl/neomedia/MediaServiceImpl.java	2013-11-11 06:03:23.825608000 -0500
+++ libjitsi/src/org/jitsi/impl/neomedia/MediaServiceImpl.java	2013-11-11 06:06:07.029608000 -0500
@@ -1123,7 +1123,7 @@
                                 locator.getProtocol()))
                             codecs = new Codec[] { scaler };
                         else
-                            codecs = new Codec[] { new HFlip(), scaler };
+                            codecs = new Codec[] { /*new HFlip(),*/ scaler };
 
                         trackControl.setCodecChain(codecs);
                         break;
Index: libjitsi/src/org/jitsi/impl/neomedia/device/VideoMediaDeviceSession.java
===================================================================
--- libjitsi.orig/src/org/jitsi/impl/neomedia/device/VideoMediaDeviceSession.java	2013-11-11 06:03:23.861608000 -0500
+++ libjitsi/src/org/jitsi/impl/neomedia/device/VideoMediaDeviceSession.java	2013-11-11 06:06:09.557608000 -0500
@@ -513,7 +513,7 @@
                             {
                                 controllerUpdateForCreateLocalVisualComponent(
                                     ev,
-                                    hflip);
+                                    false);
                             }
                         });
                     localPlayer.configure();
