Description: Makes sources compile/compatible with bouncycastle 1.49, original is compatible with 1.51
Index: libjitsi/src/org/jitsi/impl/neomedia/transform/dtls/TlsClientImpl.java
===================================================================
--- libjitsi.orig/src/org/jitsi/impl/neomedia/transform/dtls/TlsClientImpl.java	2014-08-06 11:07:43.000000000 -0400
+++ libjitsi/src/org/jitsi/impl/neomedia/transform/dtls/TlsClientImpl.java	2014-08-06 11:09:51.690146000 -0400
@@ -319,10 +319,10 @@
                     = new DefaultTlsSignerCredentials(
                             context,
                             dtlsControl.getCertificate(),
-                            dtlsControl.getKeyPair().getPrivate(),
+                            dtlsControl.getKeyPair().getPrivate()/*,
                             new SignatureAndHashAlgorithm(
                                     HashAlgorithm.sha1,
-                                    SignatureAlgorithm.rsa));
+                                    SignatureAlgorithm.rsa)*/);
             }
             return clientCredentials;
         }
Index: libjitsi/src/org/jitsi/impl/neomedia/transform/dtls/TlsServerImpl.java
===================================================================
--- libjitsi.orig/src/org/jitsi/impl/neomedia/transform/dtls/TlsServerImpl.java	2014-08-06 11:07:43.000000000 -0400
+++ libjitsi/src/org/jitsi/impl/neomedia/transform/dtls/TlsServerImpl.java	2014-08-06 11:11:12.138146000 -0400
@@ -117,13 +117,13 @@
                         CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA256,
                         CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA256,
                         CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA,
-                        CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA,
-/* core/src/test/java/org/bouncycastle/crypto/tls/test/MockDTLSServer.java */
+                        CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA//,
+/* core/src/test/java/org/bouncycastle/crypto/tls/test/MockDTLSServer.java 
                         CipherSuite.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
                         CipherSuite.TLS_ECDHE_RSA_WITH_ESTREAM_SALSA20_SHA1,
                         CipherSuite.TLS_ECDHE_RSA_WITH_SALSA20_SHA1,
                         CipherSuite.TLS_RSA_WITH_ESTREAM_SALSA20_SHA1,
-                        CipherSuite.TLS_RSA_WITH_SALSA20_SHA1
+                        CipherSuite.TLS_RSA_WITH_SALSA20_SHA1*/
                     };
     }
 
@@ -223,10 +223,10 @@
                 = new DefaultTlsSignerCredentials(
                         context,
                         dtlsControl.getCertificate(),
-                        dtlsControl.getKeyPair().getPrivate(),
+                        dtlsControl.getKeyPair().getPrivate()/*,
                         new SignatureAndHashAlgorithm(
                                 HashAlgorithm.sha1,
-                                SignatureAlgorithm.rsa));
+                                SignatureAlgorithm.rsa)*/);
         }
         return rsaSignerCredentials;
     }
@@ -242,7 +242,7 @@ public class TlsServerImpl
     public Hashtable getServerExtensions()
         throws IOException
     {
-        Hashtable serverExtensions = getServerExtensionsOverride();
+        Hashtable serverExtensions = super.getServerExtensions();
 
         if (getDtlsControl().isSrtpDisabled())
         {
@@ -292,68 +292,6 @@ public class TlsServerImpl
         return serverExtensions;
     }
 
-    /**
-     * FIXME: If Client Hello does not include points format extensions then
-     * we will end up with alert 47 failure caused by NPE on
-     * serverECPointFormats. It was causing JitsiMeet to fail with Android
-     * version of Chrome.
-     *
-     * The fix has been posted upstream and this method should be removed once
-     * it is published.
-     */
-    @SuppressWarnings("rawtypes")
-    private Hashtable getServerExtensionsOverride()
-        throws IOException
-    {
-        if (this.encryptThenMACOffered && allowEncryptThenMAC())
-        {
-            /*
-             * draft-ietf-tls-encrypt-then-mac-03 3. If a server receives an
-             * encrypt-then-MAC request extension from a client and then selects
-             * a stream or AEAD cipher suite, it MUST NOT send an
-             * encrypt-then-MAC response extension back to the client.
-             */
-            if (TlsUtils.isBlockCipherSuite(this.selectedCipherSuite))
-            {
-                TlsExtensionsUtils.addEncryptThenMACExtension(
-                    checkServerExtensions());
-            }
-        }
-
-        if (this.maxFragmentLengthOffered >= 0
-            && MaxFragmentLength.isValid(maxFragmentLengthOffered))
-        {
-            TlsExtensionsUtils.addMaxFragmentLengthExtension(
-                checkServerExtensions(), this.maxFragmentLengthOffered);
-        }
-
-        if (this.truncatedHMacOffered && allowTruncatedHMac())
-        {
-            TlsExtensionsUtils.addTruncatedHMacExtension(
-                checkServerExtensions());
-        }
-
-        if (TlsECCUtils.isECCCipherSuite(this.selectedCipherSuite))
-        {
-            /*
-             * RFC 4492 5.2. A server that selects an ECC cipher suite in
-             * response to a ClientHello message including a Supported Point
-             * Formats Extension appends this extension (along with others) to
-             * its ServerHello message, enumerating the point formats it can
-             * parse.
-             */
-            this.serverECPointFormats = new short[]{
-                ECPointFormat.uncompressed,
-                ECPointFormat.ansiX962_compressed_prime,
-                ECPointFormat.ansiX962_compressed_char2, };
-
-            TlsECCUtils.addSupportedPointFormatsExtension(
-                checkServerExtensions(), serverECPointFormats);
-        }
-
-        return serverExtensions;
-    }
-
     /**
      * {@inheritDoc}
      *
